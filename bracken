Step 1: Bracken-build

Bracken relies on bayesian probabilities that derive from knowledge about the Kraken classification of each read-length kmer from all genomes within the Kraken database. Therefore, prior to abundance estimation with bracken, we must divide each genome in the Kraken database into read-length kmers and classify each of those kmers.

Run either Step 1 or Steps 1a/1b/1c combined. Step 1 will perform Steps 1a/1b/1c using a single script.

Step 1: Bracken-build - combination of Steps 1a/1b/1c in a single bash script [Please note bracken/bracken-build scripts cannot accept the long format for options at the moment].

./bracken-build -d ${KRAKEN_DB} -t ${THREADS} -k ${KMER_LEN} -l ${READ_LEN} -x ${KRAKEN_INSTALLATION}

    ${KRAKEN_DB} = built Kraken database [must have library/taxonomy folders]
        Note: If using Kraken 1.0, this script will check for .kdb/.idb files and seqid2taxid.map. If using Kraken 2.0, this script for taxo.k2d and seqid2taxid.map files 

    ${KMER_LEN} = length of kmer used to build the database [default: 35
        Note: Kraken 1 uses k=31 by default while Kraken 2 uses k=35. 

    ${READ_LEN} = ideal length of reads in your sample [default: 100]

    ${KRAKEN_INSTALLATION} = path to kraken or kraken2 executables.
        Note: This parameter is NOT required. If not specified, the script will check for kraken2 then kraken in the user PATH. If none are found, the program will return an error. If both kraken and kraken2 are installated, the script will use kraken2 by default. 

    ${THREADS} = number of threads to use for parallel processing of the library files. 

Step #1a: Search all library input sequences against the database using:

kraken --db=${KRAKEN_DB} --threads=10 <( find -L ${KRAKEN_DB}/library \( -name "*.fna" -o -name "*.fasta" -o -name "*.fa" \) -exec cat {} + ) > database.kraken

kraken2 --db=${KRAKEN2_DB} --threads=10 <( find -L ${KRAKEN_DB}/library \( -name "*.fna" -o -name "*.fasta" -o -name "*.fa" \) -exec cat {} + ) > database.kraken

Step #1b: Compute the classifications for each perfect read of ${READ_LENGTH} base pairs from one of the input sequences.

./kmer2read_distr --seqid2taxid ${KRAKEN_DB}/seqid2taxid.map --taxonomy ${KRAKEN_DB}/taxonomy --kraken database.kraken --output database${READ_LEN}mers.kraken -k ${KMER_LEN} -l ${READ_LEN} -t ${THREADS}

Step #1c: Generate kmer distribution file from the.

python generate_kmer_distribution.py -i database${READ_LEN}mers.kraken; -o database${READ_LEN}mers.kmer_distrib  does this mean i need my read sequences in the library folder? or the output.kraken files in the library folder of the kraken db?
