(base) lj752@bspc-linux-13:/mnt/data/lj752/data/MSc_training/scripting$ /mnt/data/lj752/tools/VALET/src/py/valet.py -a /mnt/data/lj752/data/MSc_training/scripting/data_output/medaka/consensus.fasta -r /mnt/data/lj752/data/MSc_training/scripting/fastq_0.fastq -p 8
###########################################################################
PROCESSING ASSEMBLY: asm_0 (/mnt/data/lj752/data/MSc_training/scripting/data_output/medaka/consensus.fasta)
###########################################################################
---------------------------------------------------------------------------
STEP:	 FILTERING ASSEMBLY CONTIGS LESS THAN 1000 BPs
RESULTS:	 output/asm_0/filtered_assembly.fasta
---------------------------------------------------------------------------
STEP:	 ALIGNING READS
COMMAND:	 bowtie2-build /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/filtered_assembly.fasta /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/indexes/temp_snbltew7
COMMAND:	 bowtie2 -a -x /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/indexes/temp_snbltew7 -q -U /mnt/data/lj752/data/MSc_training/scripting/fastq_0.fastq --very-sensitive -a --reorder -p 8 --un /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/unaligned_reads/unaligned.reads -S output/asm_0/sam/library.sam
---------------------------------------------------------------------------
STEP:	 RUNNING SAMTOOLS
COMMAND:	 samtools view -F 0x100 -bS output/asm_0/sam/library.sam
COMMAND:	 samtools sort -@ 16 -o output/asm_0/bam/sorted_library.bam output/asm_0/bam/library.bam
COMMAND:	 samtools mpileup -C50 -A -f output/asm_0/filtered_assembly.fasta output/asm_0/bam/sorted_library.bam
RESULTS:	 output/asm_0/coverage/mpileup_output.out
COMMAND:	 samtools index output/asm_0/bam/sorted_library.bam
---------------------------------------------------------------------------
STEP:	 CALCULATING CONTIG COVERAGE
RESULTS:	 output/asm_0/coverage/temp.cvg
TypeError: '>' not supported between instances of 'str' and 'int'



import pandas as pd
import sys

def vcf_to_df(vcf_files):
    """
    Convert a list of VCF files to a DataFrame.
    """
    try:
        # Initialize an empty list to store the DataFrames
        dfs = []

        # Iterate over each VCF file in the list
        for vcf_file in vcf_files:
            # Read the VCF file into a DataFrame
            df = pd.read_csv(vcf_file, sep='\t', comment='#', header=None)

            # Append the DataFrame to the list
            dfs.append(df)

        # Concatenate the list of DataFrames
        vcf_df = pd.concat(dfs, ignore_index=True)

        # Drop the duplicate columns
        vcf_df = vcf_df.loc[:, ~vcf_df.columns.duplicated()]

        # Rename the columns to match the original VCF file
        vcf_df.columns = vcf_df.columns.map(lambda x: x.split('_')[1] if '_' in x else x)

        # Return the concatenated DataFrame
        return vcf_df

    except Exception as e:
        # Print the error message and exit
        print(f"Error: {e}")
        sys.exit(1)



def calculate_contig_coverage(options, output_dir, pileup_file):
    """
    Calculate contig coverage.  The coverage of a contig is the mean per-bp coverage.

    Args:
        options: command line options.
        pileup_file: filename of the samtools formatted pileup file.
    Returns:
        Filename of the coverage file.
    """

    coverage_filename = output_dir + '/coverage/temp.cvg'
    coverage_file = open(coverage_filename, 'w')

    prev_contig = None
    curr_contig = None

    length = 0
    curr_coverage = 0

    for record in open(pileup_file, 'r'):
        fields = record.strip().split()

        if prev_contig != fields[0]:
            if prev_contig:
                coverage_file.write(prev_contig + '\t' + str(float(curr_coverage) / length) + '\n')

            prev_contig = fields[0]
            length = 0
            curr_coverage = 0

        curr_coverage += int(fields[3])
        length += 1
    if prev_contig:
        coverage_file.write(prev_contig + '\t' + str(float(curr_coverage) / length) + '\n')
    coverage_file.close()

    return coverage_filename
