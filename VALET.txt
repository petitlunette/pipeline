(base) lj752@bspc-linux-13:/mnt/data/lj752/data/MSc_training/scripting$ /mnt/data/lj752/tools/VALET/src/py/valet.py -a /mnt/data/lj752/data/MSc_training/scripting/data_output/medaka/consensus.fasta -r /mnt/data/lj752/data/MSc_training/scripting/fastq_0.fastq -p 8
###########################################################################
PROCESSING ASSEMBLY: asm_0 (/mnt/data/lj752/data/MSc_training/scripting/data_output/medaka/consensus.fasta)
###########################################################################
---------------------------------------------------------------------------
STEP:	 FILTERING ASSEMBLY CONTIGS LESS THAN 1000 BPs
RESULTS:	 output/asm_0/filtered_assembly.fasta
---------------------------------------------------------------------------
STEP:	 ALIGNING READS
COMMAND:	 bowtie2-build /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/filtered_assembly.fasta /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/indexes/temp_snbltew7
COMMAND:	 bowtie2 -a -x /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/indexes/temp_snbltew7 -q -U /mnt/data/lj752/data/MSc_training/scripting/fastq_0.fastq --very-sensitive -a --reorder -p 8 --un /mnt/data/lj752/data/MSc_training/scripting/output/asm_0/unaligned_reads/unaligned.reads -S output/asm_0/sam/library.sam
---------------------------------------------------------------------------
STEP:	 RUNNING SAMTOOLS
COMMAND:	 samtools view -F 0x100 -bS output/asm_0/sam/library.sam
COMMAND:	 samtools sort -@ 16 -o output/asm_0/bam/sorted_library.bam output/asm_0/bam/library.bam
COMMAND:	 samtools mpileup -C50 -A -f output/asm_0/filtered_assembly.fasta output/asm_0/bam/sorted_library.bam
RESULTS:	 output/asm_0/coverage/mpileup_output.out
COMMAND:	 samtools index output/asm_0/bam/sorted_library.bam
---------------------------------------------------------------------------
STEP:	 CALCULATING CONTIG COVERAGE
RESULTS:	 output/asm_0/coverage/temp.cvg
TypeError: '>' not supported between instances of 'str' and 'int'




#this is the valet code that is having the issue
def calculate_contig_coverage(options, output_dir, pileup_file):
    """
    Calculate contig coverage.  The coverage of a contig is the mean per-bp coverage.

    Args:
        options: command line options.
        pileup_file: filename of the samtools formatted pileup file.
    Returns:
        Filename of the coverage file.
    """

    coverage_filename = output_dir + '/coverage/temp.cvg'
    coverage_file = open(coverage_filename, 'w')

    prev_contig = None
    curr_contig = None

    length = 0
    curr_coverage = 0

    for record in open(pileup_file, 'r'):
        fields = record.strip().split()

        if prev_contig != fields[0]:
            if prev_contig:
                coverage_file.write(prev_contig + '\t' + str(float(curr_coverage) / length) + '\n')

            prev_contig = fields[0]
            length = 0
            curr_coverage = 0

        curr_coverage += int(fields[3])
        length += 1
    if prev_contig:
        coverage_file.write(prev_contig + '\t' + str(float(curr_coverage) / length) + '\n')
    coverage_file.close()

    return coverage_filename




##Lauren's proposition to solve issue

The following are potentially the reasons why:
The python function 'clculate_contig_coverage' does not directly perform any comparison operations ('>') between strings and integers. This suggests that the error might not be directly related to the operations within this function but may stem from how the function integrates with the rest of the pipeline or how the data is passed into it.

Can we try the following:
1. Ensure file closing with context managers: use context managers ('with' statement) to handle file opening and closing. This would ensure files are properly closed even if an error occurs.
2. Type checking and error handling: while the function assumes well-formatted input from the pileup file, implementing basic error handling and validation can maybe catch and address issues with unexpected file contents.
3. Debugging information such as print statements.

The following code has been adapted to address the above mentioned, some things may have to be adjusted such as the debugging prints ('print(f"Error processing record: {record.strip()}")'):

def calculate_contig_coverage(options, output_dir, pileup_file):
    """
    Calculate contig coverage. The coverage of a contig is the mean per-bp coverage.
    
    Args:
        options: command line options.
        pileup_file: filename of the samtools formatted pileup file.
    Returns:
        Filename of the coverage file.
    """

    coverage_filename = f"{output_dir}/coverage/temp.cvg"

    with open(coverage_filename, 'w') as coverage_file, open(pileup_file, 'r') as pileup:
        prev_contig = None
        curr_coverage = 0
        length = 0

        for record in pileup:
            fields = record.strip().split()
            try:
                if len(fields) < 4:
                    continue  # Skip incomplete records
                if prev_contig != fields[0]:
                    if prev_contig is not None:
                        coverage_file.write(f"{prev_contig}\t{curr_coverage / length:.2f}\n")
                    prev_contig = fields[0]
                    length = 0
                    curr_coverage = 0

                curr_coverage += int(fields[3])
                length += 1
            except ValueError:
                print(f"Error processing record: {record.strip()}")
                continue  # Skip records with conversion errors

        if prev_contig and length > 0:
            coverage_file.write(f"{prev_contig}\t{curr_coverage / length:.2f}\n")

    return coverage_filename

